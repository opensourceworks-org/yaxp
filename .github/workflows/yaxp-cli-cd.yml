name: Build and Release Rust CLI

on:
  push:
    tags:
      - 'v*'  # Triggers release when a version tag is pushed
  workflow_dispatch:

jobs:
  build-linux-x64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

#      - name: Install dependencies
#        run: |
#          sudo apt-get update
#          sudo apt-get install -y libssl-dev pkg-config

      - name: Get version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build for Linux x64
        working-directory: crates/yaxp-cli
        run: cargo build --release

      - name: Archive Linux x64 build
        run: |
          mkdir -p target/linux
          mv target/release/yaxp-cli target/linux/linux-x64-${{ steps.version.outputs.version }}
          tar czf target/linux/linux-x64-${{ steps.version.outputs.version }}.tar.gz -C target/linux linux-x64-${{ steps.version.outputs.version }}

      - name: Upload Linux x64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-x64-${{ steps.version.outputs.version }}-release
          path: target/linux/linux-x64-${{ steps.version.outputs.version }}.tar.gz

  build-linux-arm64:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Rust
        uses: actions/setup-rust@v1
        with:
          toolchain: stable
          target: aarch64-unknown-linux-gnu

      - name: Install dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y gcc-aarch64-linux-gnu
         
      - name: Get version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build for Linux arm64
        run: |
          rustup target add aarch64-unknown-linux-gnu
          cargo build --release --target aarch64-unknown-linux-gnu
        working-directory: crates/yaxp-cli

      - name: Archive Linux arm64 build
        run: |
          mkdir -p target/linux
          mv target/aarch64-unknown-linux-gnu/release/yaxp-cli target/linux/linux-arm64-${{ steps.version.outputs.version }}
          tar czf target/linux/linux-arm64-${{ steps.version.outputs.version }}.tar.gz -C target/linux linux-arm64-${{ steps.version.outputs.version }}

      - name: Upload Linux arm64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: linux-arm64-${{ steps.version.outputs.version }}-release
          path: target/linux/linux-arm64-${{ steps.version.outputs.version }}.tar.gz

  # build-linux-armv7:
  #   runs-on: ubuntu-latest
  #   steps:
  #     - name: Checkout repository
  #       uses: actions/checkout@v2

  #     - name: Set up Rust
  #       uses: actions-rs/toolchain@v1
  #       with:
  #         toolchain: stable

  #     - name: Get version from tag
  #       id: version
  #       run: |
  #         VERSION=${GITHUB_REF#refs/tags/}
  #         echo "version=$VERSION" >> $GITHUB_OUTPUT

  #     - name: Build for Linux armv7
  #       run: |
  #         rustup target add armv7-unknown-linux-gnueabihf
  #         cargo build --release --target armv7-unknown-linux-gnueabihf
  #       working-directory: crates/yaxp-cli

  #     - name: Archive Linux armv7 build
  #       run: |
  #         mkdir -p target/linux
  #         mv target/armv7-unknown-linux-gnueabihf/release/yaxp-cli target/linux/linux-armv7-${{ steps.version.outputs.version }}
  #         tar czf target/linux/linux-armv7-${{ steps.version.outputs.version }}.tar.gz -C target/linux linux-armv7-${{ steps.version.outputs.version }}

  #     - name: Upload Linux armv7 artifact
  #       uses: actions/upload-artifact@v4
  #       with:
  #         name: linux-armv7-${{ steps.version.outputs.version }}-release
  #         path: target/linux/linux-armv7-${{ steps.version.outputs.version }}.tar.gz

  build-windows-x64:
    runs-on: windows-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Get version from tag
        id: version
        run: |
          $version = $env:GITHUB_REF -replace '^refs/tags/', ''
          echo "version=$version" >> $GITHUB_OUTPUT

      - name: Build for Windows x64
        working-directory: crates/yaxp-cli
        run: cargo build --release --target x86_64-pc-windows-msvc

      - name: Archive Windows x64 build
        run: |
          mkdir -p target/windows
          mv target/x86_64-pc-windows-msvc/release/yaxp-cli.exe target/windows/windows-x64-${{ steps.version.outputs.version }}.exe
          tar czf target/windows/windows-x64-${{ steps.version.outputs.version }}.tar.gz -C target/windows windows-x64-${{ steps.version.outputs.version }}.exe

      - name: Upload Windows x64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: windows-x64-${{ steps.version.outputs.version }}-release
          path: target/windows/windows-x64-${{ steps.version.outputs.version }}.tar.gz

  build-macos-arm64:
    runs-on: macos-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Set up Rust
        uses: actions-rs/toolchain@v1
        with:
          toolchain: stable

      - name: Get version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Build for macOS arm64
        working-directory: crates/yaxp-cli
        run: cargo build --release --target aarch64-apple-darwin

      - name: Archive macOS arm64 build
        run: |
          mkdir -p target/macos
          mv target/aarch64-apple-darwin/release/yaxp-cli target/macos/macos-arm64-${{ steps.version.outputs.version }}
          tar czf target/macos/macos-arm64-${{ steps.version.outputs.version }}.tar.gz -C target/macos macos-arm64-${{ steps.version.outputs.version }}

      - name: Upload macOS arm64 artifact
        uses: actions/upload-artifact@v4
        with:
          name: macos-arm64-${{ steps.version.outputs.version }}-release
          path: target/macos/macos-arm64-${{ steps.version.outputs.version }}.tar.gz

  release:
    # needs: [build-linux-x64]
    needs: [build-linux-x64, build-linux-arm64, build-windows-x64, build-macos-arm64]
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v2

      - name: Get version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Show downloaded artifacts
        run: ls -R dist

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: dist/**/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GH_API_TOKEN }}
